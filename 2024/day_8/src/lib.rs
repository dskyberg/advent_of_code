use anyhow::Result;
use std::collections::{HashMap, HashSet};

use aoc_utils::{Matrix, Point};

#[derive(Debug)]
pub struct Board {
    pub matrix: Matrix<u8>,
    pub map: HashMap<u8, Vec<Point>>,
}

impl Board {
    #[inline]
    pub fn valid_point(&self, p: &Point) -> bool {
        self.matrix.valid_point(p)
    }

    pub fn extend_map(&mut self, nodes: &HashSet<Point>) {
        for point in nodes {
            self.matrix.set_unsafe(point, b'#');
        }
    }
}

pub fn read_data(data: &str) -> Result<Board> {
    let matrix = data.parse::<Matrix<u8>>()?;

    let mut map = HashMap::new();
    matrix.iter().for_each(|(p, t)| {
        if t != b'.' {
            map.entry(t).or_insert_with(Vec::new).push(p);
        }
    });

    Ok(Board { matrix, map })
}

pub static INPUT: &str = r#"..........K........................A..............
.K................................A...............
......................................D.....A.....
....................................6............D
..................................................
.............................d....................
.........4.e.......................DT.B...........
....................d.....D......A...........B....
.............K....................................
...........................k......................
...w..............4.....................y.........
........w.........................................
..............g..k..............d..........y......
.....w.....Q..............................T.......
...............b..........k................6......
.................................W...T............
................w..............BW..T..............
............g....4e.....................W.........
.......1.................g.......................W
........k..........................6.....0........
.................a................................
....................4.a........3.g..............7.
.............m........................I.0.........
..............K7..............V...................
....Q................................I............
..9........b......................I...............
...................d..............................
.......e..........................................
....e...........t..E................3.............
......1..aQ........t....v.....3..........I..0.....
...........................v.t.....3.7............
..........i.......m........M......................
...Q..29..a...................m...................
...9......q..........mt...........................
....1...............Y.....M.........7.............
..........b..1...E.v..Y...........................
................v..........q...............0......
..................E.................5.............
9...i..2b................................8........
.....q..2............Y..M.........................
............q...............................V.....
...i.................................V............
.i..............E............M....................
.........................................G........
............8................Y....................
.........2................8..............5........
......................................5....V......
............................................G.....
.....................................5...........G
.................................8................
"#;
